class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        // Time Complexity::Worst Case: O(n)
        // vector<int> arr;
        // sort(nums2.begin(),nums2.end());
        // for(const int &num: nums1){
        //     if(binary_search(nums2.begin(),nums2.end(),num)
        //     && find(arr.begin(),arr.end(),num) == arr.end()){
        //         arr.push_back(num);
        //     }
        // }
        // return arr;

        //Time Complexity: O(n log n + m log m)
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(), nums2.end());
        int i=0,j=0;
        vector<int> result;
        while(i<nums1.size() && j<nums2.size()){
            if(nums1[i]<nums2[j]){
                i++;
            }
            else if(nums1[i] > nums2[j]){
                j++;
            }
            else{
                if(result.empty() || result.back() != nums1[i]){
                    result.push_back(nums1[i]);
                }
                i++;
                j++;
            }
        }
        return result;

        //We can also use hashmap for O(n1+n2)
        //but that's for later...
    }
};